/*
 * Mutation.cpp
 *
 *  Created on: 3-feb.-2012
 *      Author: woutergl
 */

#include "Mutation.h"


/***************************************************************************************************************
 * Base Class BitMutation
 ***************************************************************************************************************/

std::string Mutation::BitString(){
	return m_Node;
}
std::string Mutation::FlipBits(){
	return m_Node;
}
std::string Mutation::Boundary(){
	return m_Node;
}
std::string Mutation::Uniform(){
	return m_Node;
}
std::string Mutation::Gaussian(){
	return m_Node;
}
std::string Mutation::Duplication(){
	return m_Node;
}
std::string Mutation::Deletion(){
	return m_Node;
}
std::string Mutation::Insertion(){
	return m_Node;
}


/***************************************************************************************************************
 * Derived Class BitMutation
 ***************************************************************************************************************/

std::string BitMutation::BitString(){
	std::cout << "original value: " << m_Node->value() << std::endl;
	std::string strValue = m_Node->value();

	int nRandom = rand() % strValue.size();
	std::cout << "changing bit " << nRandom << "-> " << strValue.at(nRandom) << std::endl;

	if(strValue.at(nRandom) =='1'){
		strValue.at(nRandom) = '0';
	}
	else{
		strValue.at(nRandom) = '1';
	}

	//char* pchValue = m_Doc.allocate_string(strValue.c_str());
	//m_Node->value(pchValue);

	std::cout << "mutated value:  " << m_Node->value() << std::endl;
	return m_Node;
}
std::string BitMutation::FlipBits(){
	return m_Node;
}
std::string BitMutation::Boundary(){
	return m_Node;
}
std::string BitMutation::Uniform(){
	return m_Node;
}
std::string BitMutation::Gaussian(){
	return m_Node;
}
std::string BitMutation::Duplication(){
	return m_Node;
}
std::string BitMutation::Deletion(){
	return m_Node;
}
std::string BitMutation::Insertion(){
	return m_Node;
}


/***************************************************************************************************************
 * Derived Class IntegerMutation
 ***************************************************************************************************************/
std::string IntegerMutation::BitString(){
	return m_Node;
}
std::string IntegerMutation::FlipBits(){
	return m_Node;
}
std::string IntegerMutation::Boundary(){
	return m_Node;
}
std::string IntegerMutation::Uniform(){
	return m_Node;
}
std::string IntegerMutation::Gaussian(){
	return m_Node;
}
std::string IntegerMutation::Duplication(){
	return m_Node;
}
std::string IntegerMutation::Deletion(){
	return m_Node;
}
std::string IntegerMutation::Insertion(){
	return m_Node;
}


/***************************************************************************************************************
 * Derived Class DoubleMutation
 ***************************************************************************************************************/
std::string DoubleMutation::BitString(){
	return m_Node;
}
std::string DoubleMutation::FlipBits(){
	return m_Node;
}
std::string DoubleMutation::Boundary(){
	return m_Node;
}
std::string DoubleMutation::Uniform(){
	return m_Node;
}
std::string DoubleMutation::Gaussian(){
	return m_Node;
}
std::string DoubleMutation::Duplication(){
	return m_Node;
}
std::string DoubleMutation::Deletion(){
	return m_Node;
}
std::string DoubleMutation::Insertion(){
	return m_Node;
}


/***************************************************************************************************************
 * Derived Class AlphanumMutation
 ***************************************************************************************************************/
std::string AlphanumMutation::BitString(){
	return m_Node;
}
std::string AlphanumMutation::FlipBits(){
	return m_Node;
}
std::string AlphanumMutation::Boundary(){
	return m_Node;
}
std::string AlphanumMutation::Uniform(){
	return m_Node;
}
std::string AlphanumMutation::Gaussian(){
	return m_Node;
}
std::string AlphanumMutation::Duplication(){
	return m_Node;
}
std::string AlphanumMutation::Deletion(){
	return m_Node;
}
std::string AlphanumMutation::Insertion(){
	return m_Node;
}


/***************************************************************************************************************
 * Derived Class CustomMutation
 ***************************************************************************************************************/
std::string CustomMutation::BitString(){
	return m_Node;
}
std::string CustomMutation::FlipBits(){
	return m_Node;
}
std::string CustomMutation::Boundary(){
	return m_Node;
}
std::string CustomMutation::Uniform(){
	return m_Node;
}
std::string CustomMutation::Gaussian(){
	return m_Node;
}
std::string CustomMutation::Duplication(){
	return m_Node;
}
std::string CustomMutation::Deletion(){
	return m_Node;
}
std::string CustomMutation::Insertion(){
	return m_Node;
}


/***************************************************************************************************************
 * Derived Class TreeMutation
 ***************************************************************************************************************/
std::string TreeMutation::BitString(){
	return m_Node;
}
std::string TreeMutation::FlipBits(){
	return m_Node;
}
std::string TreeMutation::Boundary(){
	return m_Node;
}
std::string TreeMutation::Uniform(){
	return m_Node;
}
std::string TreeMutation::Gaussian(){
	return m_Node;
}
std::string TreeMutation::Duplication(){
	return m_Node;
}
std::string TreeMutation::Deletion(){
	return m_Node;
}
std::string TreeMutation::Insertion(){
	return m_Node;
}

