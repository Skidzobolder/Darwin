//============================================================================
// Name        : DTCStl.cpp
// Author      : Wouter Glorieux
// Version     :
// Copyright   : 
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <sstream>
#include <String>
#include <vector>
#include <fstream>


int main(int argc, char *argv[]) {

	std::string strFileName = "";

	int nMode = 0;

	bool bVerbose = false;
	if(argc == 4){
		strFileName= argv[1];
		 if(argv[2] == std::string("-highest")){
			 nMode = 1;
		 }
		 else if (argv[2] == std::string("-average")){
			 nMode = 2;
		 }
		bVerbose = true;
	}
	else if(argc == 3){
		strFileName= argv[1];
		 if(argv[2] == std::string("-highest")){
			 nMode = 1;
		 }
		 else if (argv[2] == std::string("-average")){
			 nMode = 2;
		 }
	}
	else{
		std::cout << "Usage: DTCStl.exe inputFilename [-volume , -centermass] [-verbose]" << std::endl;
		exit(1);
	}

	std::vector<int> vnScores;

    // ifstream is used for reading files
    // We'll read from a file called Sample.dat
    ifstream inf(strFileName.c_str());

    // If we couldn't open the input file stream for reading
    if (!inf)
    {
        // Print an error and exit
        cerr << strFileName << " could not be opened for reading!" << endl;
        exit(2);
    }

    // While there's still stuff left to read
    while (inf)
    {
        // read stuff from the file into a string and print it
        std::string strInput;
        std::getline(inf, strInput);
        std::vector<std::string> vstrData;
        if(strInput != ""){
        	StringExplode(strInput, " ", &vstrData);




        	if(bVerbose){


        	}
        }
    }


    int nScore = 0;
    switch (nMode)
    {
        case 1:

            break;
        case 2:

            break;

        default:
            std::cout << "Unknown mode";
            nScore = 0;
            break;
    }

    if(bVerbose){
    	std::cout << "\nSCORE: " << nScore << std::endl;
    }


	return nScore;
}
